int a[101];
int b[101];
int num[102][102];
int tmp[3][2] = {{1, 2},{3, 4},{5, 6}};


void LCS(int lena, int lenb) {
    int i;
    int j;
    i = 1;

    while (i <= lena) {
        j = 1;
        while (j <= lenb) {
            if (a[i - 1] == b[j - 1]) {
                num[i][j] = num[i - 1][j - 1] + 1;
            } else {
                if (num[i][j - 1] > num[i - 1][j])
                    num[i][j] = num[i][j - 1];
                else
                    num[i][j] = num[i - 1][j];
            }
            j = j + 1;
        }
        i = i + 1;
    }
}


int main() {
    const int abc = 1;
    const int abcd[5] = {1, 2, 3, 4, 5};
    const int abcde[2][2] = {{1,3},{2,4}};
    int ab[3] = {1, 1, 1};
    printf("19373061\n");
    // 最长公共子序列
    int lena;
    lena = getint();
    int lenb;
    lenb = getint();
    int i;
    int t;
    i = 0;
    while (i < lena) {
        a[i] = getint();
        i = i + 1;
    }
    printf("a[0]:%d\n", a[0]);
    i = 0;
    while (i < lenb) {
        b[i] = getint();
        i = i + 1;
    }
    printf("b[0]:%d\n", b[0]);

    t = 1;
    while (t > 0) {
        if (t < 10)
            break;
        t = t + 1;
    }
    printf("t:%d\n", t);

    printf("test 2d array-1: %d\n", tmp[1][1]);
    printf("test 2d array-2: %d\n", tmp[0][0]);

    printf("test global-local-1: %d\n", tmp[0][0]);
    int tmp[3][2] = {{7, 2},
                     {3, 4},
                     {5, 6}};
    printf("test global-local-2: %d\n", tmp[0][0]);
    tmp[0][0] = 100;
    printf("test global-local-3: %d\n", tmp[0][0]);

    LCS(lena, lenb);
    printf("%d", num[lena][lenb]);
    return 0;
}