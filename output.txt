INTTK int
IDENFR global_var
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR f
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
INTTK int
IDENFR func
LPARENT (
RPARENT )
LBRACE {
IDENFR global_var
ASSIGN =
IDENFR global_var
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR package0_1
LPARENT (
INTTK int
IDENFR w
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR v
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
INTTK int
IDENFR k
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR n
RPARENT )
LBRACE {
IDENFR f
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR j
LEQ <=
IDENFR c
RPARENT )
LBRACE {
IDENFR f
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR n
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LEQ <=
IDENFR c
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR j
DIV /
IDENFR w
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
INTTK int
IDENFR s
SEMICN ;
IDENFR s
ASSIGN =
IDENFR j
MINU -
IDENFR k
MULT *
IDENFR w
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR k
GRE >
INTCON 0
AND &&
IDENFR f
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR s
RBRACK ]
PLUS +
IDENFR k
MULT *
IDENFR v
LBRACK [
IDENFR i
RBRACK ]
GRE >
IDENFR f
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
LBRACE {
IDENFR f
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR f
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR s
RBRACK ]
PLUS +
IDENFR k
MULT *
IDENFR v
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR f
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR f
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR f
LBRACK [
IDENFR n
RBRACK ]
LBRACK [
IDENFR c
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR getResult
LPARENT (
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR c
COMMA ,
INTTK int
IDENFR res
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR v
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR w
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR n
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
IDENFR j
ASSIGN =
IDENFR c
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GEQ >=
INTCON 1
RPARENT )
LBRACE {
WHILETK while
LPARENT (
IDENFR f
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
GRE >
IDENFR f
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
LBRACE {
IDENFR res
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR res
LBRACK [
IDENFR i
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
MINU -
IDENFR w
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373061\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR w
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 4
COMMA ,
INTCON 6
COMMA ,
INTCON 6
COMMA ,
INTCON 3
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR v
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR res
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR n
SEMICN ;
IDENFR n
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR c
SEMICN ;
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
IDENFR package0_1
LPARENT (
IDENFR w
COMMA ,
IDENFR v
COMMA ,
IDENFR n
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR n
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LEQ <=
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR f
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR getResult
LPARENT (
IDENFR n
COMMA ,
IDENFR c
COMMA ,
IDENFR res
COMMA ,
IDENFR v
COMMA ,
IDENFR w
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR res
LBRACK [
IDENFR i
RBRACK ]
GEQ >=
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d %d\n"
COMMA ,
IDENFR i
COMMA ,
IDENFR res
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR func
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR func
LPARENT (
RPARENT )
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR global_var
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
